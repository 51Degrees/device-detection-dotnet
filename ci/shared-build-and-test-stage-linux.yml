parameters:
- name: stageName # Name of the stage.
- name: imageName # Name of the agent to work on.
- name: nugetVersion
  type: string
  default: 5.8.0
- name: runTests
  type: string
  default: 'On'
- name: sourcesDir # Root path to source code
- name: buildDir # Root build directory

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: []

  jobs:
  - job: Build_and_Test
    displayName: Build and Test
    condition: ne(${{ parameters.runTests }}, 'Off')
  
    pool:
      vmImage: ${{ parameters.imageName }}
    
    # Configure this to run for both Debug and Release configurations
    strategy:
      maxParallel: 2
      matrix:
        debug:
          BuildConfiguration: LinuxDebug
        release:
          BuildConfiguration: LinuxRelease

    variables:
      - group: InternalKeys    
      - name: RestoreBuildProjects
        value: '**/FiftyOne.DeviceDetection.sln'
        # Projects to test
      - name: TestProjects
        value: '**/*[Tt]ests/**/*.csproj'
      - name: DataFilePath
        value: '${{ parameters.buildDir }}/51DDataFiles'
    
    steps:
    # Get the data files that are required for device detection automated system tests.
    - powershell: |
        git lfs install
        if (-Not $?) {
          "ERROR: Failed to install git lft."
          exit 1
        }
        ls
       
        git config --global --add filter.lfs.required true
        git config --global --add filter.lfs.smudge "git-lfs smudge -- %f"
        git config --global --add filter.lfs.process "git-lfs filter-process"
        git config --global --add filter.lfs.clean "git-lfs clean -- %f"
      displayName: 'Configure git lfs'
      failOnStderr: true
    
    - checkout: self
      lfs: true
      submodules: recursive

    - bash: |
       shopt -s globstar
       ls -d -1 **/*.csproj
      displayName: 'List all csproj files in repository'
      failOnStderr: true

    - bash: |
       sudo apt-get update
       sudo apt-get install gcc-multilib g++-multilib
      displayName: 'Install GCC'
      failOnStderr: true

    # Download the latest V4 TAC hash file from the distributor
    - task: PowerShell@2
      displayName: PowerShell - download latest tac file
      inputs:
        targetType: 'inline'
        script: |
          # Install all modules
          Write-Host ${{ parameters.sourcesDir }}
          $Env:PSModulePath += ":${{ parameters.sourcesDir }}/ci/common-ci/scripts/modules"
          Write-Host "Module Path: $($Env:PSModulePath)"
          
          if (!$(Get-DataFile -licenseKey "$(DeviceDetectionLicenseKey)" -dataType "HashV41" -product "V4TAC" -fullFilePath "TAC-HashV41.hash.gz")) {
              Write-Host "# FAILED"
              exit 1
          }
        workingDirectory: '${{ parameters.buildDir }}'

    # Extract the V4 TAC Hash file to the data file staging folder.
    - task: ExtractFiles@1
      displayName: 'Extract latest tac file'
      inputs:
        archiveFilePatterns: '${{ parameters.buildDir }}/*hash.gz'
        destinationFolder: '$(DataFilePath)'
        
    # Restore NuGet packages using the dotnet core CLI.
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      retryCountOnTaskFailure: 3
      inputs:
        command: 'restore'
        projects: '$(RestoreBuildProjects)'
        feedsToUse: 'select'
        vstsFeed: '$(InternalFeedId)'

    # Build the package using the dotnet CLI.
    - task: DotNetCoreCLI@2
      displayName: 'Build Solutions'
      inputs:
        command: 'build'
        projects: '$(RestoreBuildProjects)'
        arguments: '-c $(BuildConfiguration) /p:Platform=x64'

    # Run the unit tests using the dotnet CLI. 
    - task: DotNetCoreCLI@2
      displayName: 'Dotnet Test - $(BuildConfiguration)'
      inputs:
        command: 'test'
        projects:  '$(RestoreBuildProjects)'  
        arguments: '-c $(BuildConfiguration) /p:Platform=x64 --no-build -nodereuse:false'
        testRunTitle: 'Linux-$(BuildConfiguration)-x64'
      env:
        SUPER_RESOURCE_KEY: $(SuperResourceKey_NoSupportedIO)
        DEVICE_DETECTION_DATAFILE: '$(DataFilePath)/TAC-HashV41.hash'
        ACCEPTCH_BROWSER_KEY: $(AcceptChBrowserKey)
        ACCEPTCH_HARDWARE_KEY: $(AcceptChHardwareKey)
        ACCEPTCH_PLATFORM_KEY: $(AcceptChPlatformKey)
        ACCEPTCH_NONE_KEY: $(AcceptChNoneKey)
        51D_CLOUD_ENDPOINT: 'https://cloud.51degrees.com/api/v4'
