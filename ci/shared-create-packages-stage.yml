parameters:
- name: targetPublishConfig # Target build configuration to publish
  type: string
  default: 'Release'
- name: nugetVersion # NuGet version to use
  type: string
  default: 5.8.0
- name: imageName # Name of the agent to work on
- name: linuxImage # Name of the linux image
- name: templates

stages:
- stage: CreatePackages

  variables:
  - group: CertificateVariables
  - group: CIAutomation
  # Because we are pulling in a group, we need to define local variables 
  # using the name/value syntax.
  - name: RestoreBuildProjects
    value: '*.sln'
    # Projects to test
  - name: PublishProjects
    value: |
      **/*.csproj
      !**/*[Tt]ests/**/*.csproj
      !**/*[Ee]xamples/**/*.csproj
    # Access token for the git repository. Used by the git tag task.
  - name: system_accesstoken
    value: $(System.AccessToken)
        
  jobs:
  - template: shared-git-version-job.yml@${{ parameters.templates }}
    parameters:
      imageName: ${{ parameters.imageName }}

  # This build the Linux binaries for C module to be published
  - job: Build_Linux_Binaries
    dependsOn: Versioning
    pool:
      vmImage: ${{ parameters.linuxImage }}
      
    steps:
    
    # Get the data files that are required for device detection automated system tests.
    - bash: |
       git lfs install
       if [ $? != 0 ]; then
         echo "ERROR: Failed to install lfs."
       fi

       ls
       git config --global --add filter.lfs.required true
       git config --global --add filter.lfs.smudge "git-lfs smudge -- %f"
       git config --global --add filter.lfs.process "git-lfs filter-process"
       git config --global --add filter.lfs.clean "git-lfs clean -- %f"
      displayName: 'Configure git lfs'
      failOnStderr: true
      
    - bash: |
       sudo apt-get update
       sudo apt-get -y install \
         gcc-multilib \
         g++-multilib
      displayName: 'Install gcc-multilib and g++-multilib packages'
      failOnStderr: true
    
    - checkout: self
      lfs: true
      submodules: recursive
    
    - bash: |
       shopt -s globstar
       ls -d -1 **/*.csproj
      displayName: 'List all csproj files in repository'
      failOnStderr: true
    
    # This step displays the projects that will match the pattern in the 'PublishProjects'
    # variable.
    # If example or test projects (or any other that should not be packaged) are listed
    # then the pattern may need to be modified.
    # Unfortunatley, I cannot find a way to use that pattern directly in linux so if it
    # is changed then this will need to be updated separately.
    - bash: |
       shopt -s globstar
       find **/*.csproj -not -path '**/*Tests*/*' -and -not -path '**/*Examples*/*'
      displayName: 'List csproj files to be packaged'
      failOnStderr: true
    
    - bash: './PreBuild.sh hash'
      workingDirectory: FiftyOne.DeviceDetection
      displayName: 'Make Hash'
    
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: 'FiftyOne.DeviceDetection/linux/*/*.dll'
        TargetFolder: '$(build.artifactstagingdirectory)'
        OverWrite: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: resources'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: resources
    
    # Build the Windows binaries for C module, and create packages with both Window
    # and Linux binaries.
  - job: CreatePackages
    displayName: Create Packages
    dependsOn: [Versioning,Build_Linux_Binaries]
    condition: and(succeeded(), ne(variables['CreatePackages'], 'Off'))
    
    variables:
      GitVersionNuGetVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionNuGetVer'] ]
      GitVersionSemVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionSemVer'] ]
    
    pool:
      vmImage: ${{ parameters.imageName }}
      
    steps:
    - bash: |
       git lfs install
       if [ $? != 0 ]; then
         echo "ERROR: Failed to install lfs."
       fi
       ls

       git config --global --add filter.lfs.required true
       git config --global --add filter.lfs.smudge "git-lfs smudge -- %f"
       git config --global --add filter.lfs.process "git-lfs filter-process"
       git config --global --add filter.lfs.clean "git-lfs clean -- %f"
      displayName: 'Configure git lfs'
      failOnStderr: true
      
    # The lines below are needed to allow the pipeline access to the
    # OAuth access token that controls write access to the git repository. 
    # (Required for GitTag task)
    - checkout: self
      lfs: true
      submodules: recursive
      persistCredentials: true

    # Install NuGet and restore packages
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet ${{ parameters.nugetVersion }}'
      inputs:
        versionSpec: ${{ parameters.nugetVersion }}
    
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      retryCountOnTaskFailure: 3
      inputs:
        command: 'restore'
        restoreSolution: '$(RestoreBuildProjects)'
        feedsToUse: 'select'
        vstsFeed: '$(InternalFeedId)'
    
    # Download the Linux binaries
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Linux Build Artifacts'
      inputs:
        artifactName: 'resources'
        downloadPath: '$(build.sourcesdirectory)/'
    
    # Move Linux binaries to where it can be searched for in the package.
    - script: |
       dir resources\FiftyOne.DeviceDetection
       dir
       move resources\FiftyOne.DeviceDetection\linux FiftyOne.DeviceDetection\
       if %errorlevel% neq 0 (
         echo "Failed to move Linux binaries to target location."
         exit 1
       )
       dir FiftyOne.DeviceDetection\linux

      displayName: 'Move Binaries'

    - task: UseDotNet@2
      displayName: "Configure dotnet 3.1"
      inputs:
        version: 3.1.x
        performMultiLevelLookup: true
        packageType: sdk

    # Build the C binaries for Windows 64bit
    - task: VSBuild@1
      displayName: 'Build solutions x64'
      inputs:
        solution: '$(RestoreBuildProjects)'
        vsVersion: '16.0'
        platform: 'x64'
        configuration: '${{ parameters.targetPublishConfig }}'
        clean: true
        msbuildArchitecture: 'x64'

    # Build the C binaries for Windows 32bit
    - task: VSBuild@1
      displayName: 'Build solutions x86'
      inputs:
        solution: '$(RestoreBuildProjects)'
        vsVersion: '16.0'
        platform: 'x86'
        configuration: '${{ parameters.targetPublishConfig }}'
        clean: true
        msbuildArchitecture: 'x86'

    # Index and publish symbol file to allow debugging.
    - task: PublishSymbols@2
      displayName: 'Publish Symbols'
      inputs: 
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: 'TeamServices'
        SymbolsVersion: '$(GitVersionSemVer)'
      condition: and(succeeded(), eq('${{ parameters.targetPublishConfig }}', 'Debug'))

    # The nuget package version uses the GitVersionSemVer variable.
    # This has been set by the GitVersion task above. 
    - task: DotNetCoreCLI@2
      displayName: 'Build NuGet Package'
      inputs:
        command: 'custom'
        projects: $(PublishProjects)
        custom: 'pack'
        arguments: '--output $(System.ArtifactsDirectory) --configuration ${{ parameters.targetPublishConfig }} /p:PackageVersion=$(GitVersionSemVer) /p:Version=$(GitVersionSemVer)'
        
    - template: dotnet/shared-code-signing-steps.yml@${{ parameters.templates }}
      parameters:
        codeSigningPassword: $(CodeSigningCertPassword)
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
      
  - template: shared-git-tag-job.yml@${{ parameters.templates }}
    parameters:
      imageName: ${{ parameters.imageName }}
      jobDependencies: [Versioning,CreatePackages]
      publishConfig: '${{ parameters.targetPublishConfig }}'