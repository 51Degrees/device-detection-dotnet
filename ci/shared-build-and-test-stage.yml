parameters:
- name: stageName # Name of the stage.
- name: imageName # Name of the agent to work on.
- name: nugetVersion
  type: string
  default: 5.8.0
- name: runTests
  type: string
  default: 'On'
- name: sourcesDir # Root path to source code
- name: buildDir # Root build directory

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: []

  jobs:
  - job: Build_and_Test
    displayName: Build and Test
    condition: ne(${{ parameters.runTests }}, 'Off')
  
    pool:
      vmImage: ${{ parameters.imageName }}
    
    # Configure this to run for both Debug and Release configurations
    strategy:
      maxParallel: 4
      matrix:
        debug x86:
          BuildConfiguration: Debug
          BuildPlatform: x86
        release x86:
          BuildConfiguration: Release
          BuildPlatform: x86
        debug x64:
          BuildConfiguration: Debug
          BuildPlatform: x64
        release x64:
          BuildConfiguration: Release
          BuildPlatform: x64
        
    variables:
      - group: InternalKeys    
      - name: RestoreBuildProjects
        value: '*.sln'
        # Projects to test
      - name: TestProjects
        value: '**/*[Tt]ests/**/*.csproj'
        # Projects to be published as NuGet packages
      - name: DataFilePath
        value: '${{ parameters.buildDir }}/51DDataFiles'
    
    steps:
    # Get the data files that are required for device detection automated system tests.
    - powershell: |
        git lfs install
        if (-Not $?) {
          "ERROR: Failed to install git lft."
          exit 1
        }
        ls
       
        git config --global --add filter.lfs.required true
        git config --global --add filter.lfs.smudge "git-lfs smudge -- %f"
        git config --global --add filter.lfs.process "git-lfs filter-process"
        git config --global --add filter.lfs.clean "git-lfs clean -- %f"
      displayName: 'Configure git lfs'
      failOnStderr: true
    
    - checkout: self
      lfs: true
      submodules: recursive
    
    # Install NuGet and restore packages
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet ${{ parameters.nugetVersion }}'
      inputs:
        versionSpec: ${{ parameters.nugetVersion }}
    
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      retryCountOnTaskFailure: 3
      inputs:
        command: 'restore'
        restoreSolution: '$(RestoreBuildProjects)'
        feedsToUse: 'select'
        vstsFeed: '$(InternalFeedId)'

    - task: UseDotNet@2
      displayName: "Configure dotnet"
      inputs:
        version: 3.1.x
        performMultiLevelLookup: true
        packageType: sdk  
      env:
        PROCESSOR_ARCHITECTURE: '$(BuildPlatform)'
       
    # Download the latest V4 TAC hash file from the distributor
    - task: PowerShell@2
      displayName: PowerShell - download latest tac file
      inputs:
        targetType: 'inline'
        script: |
          # Install all modules
          Write-Host ${{ parameters.sourcesDir }}
          $Env:PSModulePath += ";${{ parameters.sourcesDir }}\ci\common-ci\scripts\modules"
          Write-Host "Module Path: $($Env:PSModulePath)"
          
          if (!$(Get-DataFile -licenseKey "$(DeviceDetectionLicenseKey)" -dataType "HashV41" -product "V4TAC" -fullFilePath "TAC-HashV41.hash.gz")) {
              Write-Host "# FAILED"
              exit 1
          }
        workingDirectory: '${{ parameters.buildDir }}'
        
    # Extract the V4 TAC Hash file to the data file staging folder.
    - task: ExtractFiles@1
      displayName: 'Extract latest tac file'
      inputs:
        archiveFilePatterns: '${{ parameters.buildDir }}/*hash.gz'
        destinationFolder: '$(DataFilePath)'
           
    - task: VisualStudioTestPlatformInstaller@1
      displayName: 'Visual Studio Test Platform Installer'
      inputs:
        versionSelector: latestStable
    
    # Build
    - task: VSBuild@1
      displayName: 'Build solutions $(BuildPlatform) $(BuildConfiguration)'
      inputs:
        solution: '$(RestoreBuildProjects)'
        vsVersion: '16.0'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        clean: true
        msbuildArchitecture: '$(BuildPlatform)' 
    
    - task: VSTest@2
      displayName: 'VsTest - testAssemblies - dotnet framework - $(BuildPlatform) $(BuildConfiguration)'
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\$(BuildPlatform)\**\net4*\*Tests*.dll
          !**\*TestAdapter*.dll
          !**\*TestFramework*.dll
          !**\obj\**
        searchFolder: '$(System.DefaultWorkingDirectory)'
        otherConsoleOptions: '/Framework:net462 /Platform:$(BuildPlatform) /logger:console;verbosity="normal"'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        diagnosticsEnabled: true
        testRunTitle: 'framework-$(BuildConfiguration)-$(BuildPlatform)'
        vsTestVersion: toolsInstaller
        # Disabled these options for now as it is not finding the framework tests correctly on the build agent.
        #minimumExpectedTests: '1'
        #failOnMinTestsNotRun: true
    
    - task: VSTest@2
      displayName: 'VsTest - testAssemblies - dotnet core - $(BuildPlatform) $(BuildConfiguration)'
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\$(BuildPlatform)\**\netcoreapp*\*Tests*.dll
          !**\*TestAdapter*.dll
          !**\*TestFramework*.dll
          !**\obj\**
          !**\performance_tests.dll
        searchFolder: '$(System.DefaultWorkingDirectory)'
        vsTestVersion: 'toolsInstaller'
        codeCoverageEnabled: true
        otherConsoleOptions: '/Framework:netcoreapp3.1 /Platform:$(BuildPlatform) /logger:console;verbosity="normal"'
        testRunTitle: 'Windows-core-$(BuildConfiguration)-$(BuildPlatform)'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        failOnMinTestsNotRun: true
        diagnosticsEnabled: true
        collectDumpOn: 'always'
      env:
        SUPER_RESOURCE_KEY: $(SuperResourceKey_NoSupportedIO)
        DEVICE_DETECTION_DATAFILE: '$(DataFilePath)/TAC-HashV41.hash'
        ACCEPTCH_BROWSER_KEY: $(AcceptChBrowserKey)
        ACCEPTCH_HARDWARE_KEY: $(AcceptChHardwareKey)
        ACCEPTCH_PLATFORM_KEY: $(AcceptChPlatformKey)
        ACCEPTCH_NONE_KEY: $(AcceptChNoneKey)  
        51D_CLOUD_ENDPOINT: 'https://cloud.51degrees.com/api/v4'
      condition: succeededOrFailed()
    
      # Build the performance test project. This will only target the x64 platform.
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          cd performance-tests/
          mkdir build
          cd ..
          
          if (-Not (Test-Path -Path performance-tests/build)) {
            "ERROR: Failed to create build folder!"
            exit 1
          }
        failOnStderr: true
      displayName: 'Create Performance Test Build Directory'
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))
    
    - task: CMake@1
      displayName: 'CMake Configure Performance Test'
      inputs:
        workingDirectory: performance-tests/build
        cmakeArgs: '.. -A x64'
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))
        
    - task: CMake@1
      displayName: 'CMake Build Performance Test'
      inputs:
        workingDirectory: performance-tests/build
        cmakeArgs: '--build .'
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))
    
      # Run the performance test project. This test only target the x64 platform.
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/performance-tests/build/runPerf.ps1'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        arguments: '-c $(BuildConfiguration)'
      displayName: 'Run Performance Test'
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))
    
      # Publish the performance test report.
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'performance-tests/build'
        ArtifactName: 'perfout-$(BuildConfiguration)-x64'
        publishLocation: 'Container'
      displayName: 'Publish Performance Artifacts'
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))