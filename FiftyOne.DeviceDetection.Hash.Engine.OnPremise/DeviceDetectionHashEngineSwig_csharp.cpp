/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040301
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_DeviceDetectionHashEngineModule(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_DeviceDetectionHashEngineModule(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_DeviceDetectionHashEngineModule(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "device-detection-cxx/src/hash/EngineHash.hpp"

using namespace FiftyoneDegrees::Common;
using namespace FiftyoneDegrees::DeviceDetection;
using namespace FiftyoneDegrees::DeviceDetection::Hash;


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::map< std::string,std::string >::mapped_type const &std_map_Sl_std_string_Sc_std_string_Sg__getitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__setitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
#ifdef __cpp_lib_map_try_emplace
        (*self).insert_or_assign(key, x);
#else
        (*self)[key] = x;
#endif
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__Add(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &value){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::string >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__Remove(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(std::map< std::string,std::string > *self){
        return new std::map< std::string, std::string, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,std::string >::key_type const &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        (void)self;
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_NullReferenceError:
      exception_code = SWIG_CSharpNullReferenceException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_MapStringStringSwig__SWIG_0___() {
  void * jresult ;
  std::map< std::string,std::string > *result = 0 ;
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_MapStringStringSwig__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & is null", 0);
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_size___(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::size_type result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = ((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_empty___(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_Clear___(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_getitem___(void * jarg1, const char * jarg2) {
  const char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,std::string >::mapped_type *) &std_map_Sl_std_string_Sc_std_string_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_setitem___(void * jarg1, const char * jarg2, const char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_std_string_Sc_std_string_Sg__setitem(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_ContainsKey___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_Add___(void * jarg1, const char * jarg2, const char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__Add(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_Remove___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,std::string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_create_iterator_begin___(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (std::map< std::string,std::string,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_get_next_key___(void * jarg1, void * jarg2) {
  const char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,std::string >::key_type *) &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MapStringStringSwig_destroy_iterator___(void * jarg1, void * jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_MapStringStringSwig___(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_VectorStringSwig__SWIG_0___() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_VectorStringSwig__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Clear___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Add___(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_size___(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_capacity___(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_reserve___(void * jarg1, unsigned int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_VectorStringSwig__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_getitemcopy___(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_getitem___(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_setitem___(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Insert___(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Repeat___(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Contains___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_IndexOf___(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_LastIndexOf___(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringSwig_Remove___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_VectorStringSwig___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_RequiredPropertiesConfigSwig__SWIG_0___() {
  void * jresult ;
  RequiredPropertiesConfig *result = 0 ;
  
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_RequiredPropertiesConfigSwig__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  RequiredPropertiesConfig *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig((std::vector< std::string > const *)arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_RequiredPropertiesConfigSwig__SWIG_2___(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  RequiredPropertiesConfig *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig((char const *)arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_RequiredPropertiesConfigSwig___(void * jarg1) {
  RequiredPropertiesConfig *arg1 = (RequiredPropertiesConfig *) 0 ;
  
  arg1 = (RequiredPropertiesConfig *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_RequiredPropertiesConfigSwig_getProperties___(void * jarg1) {
  void * jresult ;
  RequiredPropertiesConfig *arg1 = (RequiredPropertiesConfig *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (RequiredPropertiesConfig *)jarg1; 
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_StringValueSwig___() {
  void * jresult ;
  Value< std::string > *result = 0 ;
  
  {
    try {
      result = (Value< std::string > *)new Value< std::string >();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_StringValueSwig_hasValue___(void * jarg1) {
  unsigned int jresult ;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  bool result;
  
  arg1 = (Value< std::string > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_StringValueSwig_getNoValueMessage___(void * jarg1) {
  char * jresult ;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  char *result = 0 ;
  
  arg1 = (Value< std::string > *)jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_StringValueSwig_getValue___(void * jarg1) {
  const char * jresult ;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  std::string result;
  
  arg1 = (Value< std::string > *)jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_StringValueSwig___(void * jarg1) {
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  
  arg1 = (Value< std::string > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_BoolValueSwig___() {
  void * jresult ;
  Value< bool > *result = 0 ;
  
  {
    try {
      result = (Value< bool > *)new Value< bool >();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_BoolValueSwig_hasValue___(void * jarg1) {
  unsigned int jresult ;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  bool result;
  
  arg1 = (Value< bool > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_BoolValueSwig_getNoValueMessage___(void * jarg1) {
  char * jresult ;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  char *result = 0 ;
  
  arg1 = (Value< bool > *)jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_BoolValueSwig_getValue___(void * jarg1) {
  unsigned int jresult ;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  bool result;
  
  arg1 = (Value< bool > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_BoolValueSwig___(void * jarg1) {
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  
  arg1 = (Value< bool > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_IntegerValueSwig___() {
  void * jresult ;
  Value< int > *result = 0 ;
  
  {
    try {
      result = (Value< int > *)new Value< int >();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_IntegerValueSwig_hasValue___(void * jarg1) {
  unsigned int jresult ;
  Value< int > *arg1 = (Value< int > *) 0 ;
  bool result;
  
  arg1 = (Value< int > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_IntegerValueSwig_getNoValueMessage___(void * jarg1) {
  char * jresult ;
  Value< int > *arg1 = (Value< int > *) 0 ;
  char *result = 0 ;
  
  arg1 = (Value< int > *)jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_IntegerValueSwig_getValue___(void * jarg1) {
  int jresult ;
  Value< int > *arg1 = (Value< int > *) 0 ;
  int result;
  
  arg1 = (Value< int > *)jarg1; 
  {
    try {
      result = (int)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_IntegerValueSwig___(void * jarg1) {
  Value< int > *arg1 = (Value< int > *) 0 ;
  
  arg1 = (Value< int > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_VectorStringValuesSwig___() {
  void * jresult ;
  Value< std::vector< std::string > > *result = 0 ;
  
  {
    try {
      result = (Value< std::vector< std::string > > *)new Value< std::vector< std::string > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringValuesSwig_hasValue___(void * jarg1) {
  unsigned int jresult ;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  bool result;
  
  arg1 = (Value< std::vector< std::string > > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringValuesSwig_getNoValueMessage___(void * jarg1) {
  char * jresult ;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  char *result = 0 ;
  
  arg1 = (Value< std::vector< std::string > > *)jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_VectorStringValuesSwig_getValue___(void * jarg1) {
  void * jresult ;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (Value< std::vector< std::string > > *)jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_VectorStringValuesSwig___(void * jarg1) {
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  
  arg1 = (Value< std::vector< std::string > > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_DoubleValueSwig___() {
  void * jresult ;
  Value< double > *result = 0 ;
  
  {
    try {
      result = (Value< double > *)new Value< double >();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_DoubleValueSwig_hasValue___(void * jarg1) {
  unsigned int jresult ;
  Value< double > *arg1 = (Value< double > *) 0 ;
  bool result;
  
  arg1 = (Value< double > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_DoubleValueSwig_getNoValueMessage___(void * jarg1) {
  char * jresult ;
  Value< double > *arg1 = (Value< double > *) 0 ;
  char *result = 0 ;
  
  arg1 = (Value< double > *)jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_DoubleValueSwig_getValue___(void * jarg1) {
  double jresult ;
  Value< double > *arg1 = (Value< double > *) 0 ;
  double result;
  
  arg1 = (Value< double > *)jarg1; 
  {
    try {
      result = (double)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_DoubleValueSwig___(void * jarg1) {
  Value< double > *arg1 = (Value< double > *) 0 ;
  
  arg1 = (Value< double > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ResultsBaseSwig___(void * jarg1) {
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  
  arg1 = (ResultsBase *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getAvailableProperties___(void * jarg1) {
  int jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int result;
  
  arg1 = (ResultsBase *)jarg1; 
  {
    try {
      result = (int)(arg1)->getAvailableProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_containsProperty___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ResultsBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->containsProperty((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getProperties___(void * jarg1) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (ResultsBase *)jarg1; 
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getPropertyName___(void * jarg1, int jarg2) {
  const char * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (ResultsBase *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getPropertyName(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValues__SWIG_0___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::vector< std::string > > result;
  
  arg1 = (ResultsBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getValues((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< std::vector< std::string > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValues__SWIG_1___(void * jarg1, int jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< std::vector< std::string > > result;
  
  arg1 = (ResultsBase *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValues(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< std::vector< std::string > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsString__SWIG_0___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::string > result;
  
  arg1 = (ResultsBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getValueAsString((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsString__SWIG_1___(void * jarg1, int jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< std::string > result;
  
  arg1 = (ResultsBase *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsString(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsBool__SWIG_0___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< bool > result;
  
  arg1 = (ResultsBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getValueAsBool((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< bool >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsBool__SWIG_1___(void * jarg1, int jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< bool > result;
  
  arg1 = (ResultsBase *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsBool(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< bool >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsInteger__SWIG_0___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< int > result;
  
  arg1 = (ResultsBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getValueAsInteger((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsInteger__SWIG_1___(void * jarg1, int jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< int > result;
  
  arg1 = (ResultsBase *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsInteger(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsDouble__SWIG_0___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< double > result;
  
  arg1 = (ResultsBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getValueAsDouble((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsBaseSwig_getValueAsDouble__SWIG_1___(void * jarg1, int jarg2) {
  void * jresult ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< double > result;
  
  arg1 = (ResultsBase *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsDouble(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Value< double >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_Date_getYear___(void * jarg1) {
  int jresult ;
  Date *arg1 = (Date *) 0 ;
  int result;
  
  arg1 = (Date *)jarg1; 
  {
    try {
      result = (int)(arg1)->getYear();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_Date_getMonth___(void * jarg1) {
  int jresult ;
  Date *arg1 = (Date *) 0 ;
  int result;
  
  arg1 = (Date *)jarg1; 
  {
    try {
      result = (int)(arg1)->getMonth();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_Date_getDay___(void * jarg1) {
  int jresult ;
  Date *arg1 = (Date *) 0 ;
  int result;
  
  arg1 = (Date *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDay();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_Date___(void * jarg1) {
  Date *arg1 = (Date *) 0 ;
  
  arg1 = (Date *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getName___(void * jarg1) {
  const char * jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getDataFilesWherePresent___(void * jarg1) {
  void * jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getDataFilesWherePresent();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getType___(void * jarg1) {
  const char * jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getType();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getCategory___(void * jarg1) {
  const char * jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getCategory();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getUrl___(void * jarg1) {
  const char * jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getUrl();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getAvailable___(void * jarg1) {
  unsigned int jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getAvailable();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getDisplayOrder___(void * jarg1) {
  int jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  int result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDisplayOrder();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getIsMandatory___(void * jarg1) {
  unsigned int jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsMandatory();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getIsList___(void * jarg1) {
  unsigned int jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsList();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getIsObsolete___(void * jarg1) {
  unsigned int jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsObsolete();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getShow___(void * jarg1) {
  unsigned int jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getShow();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getShowValues___(void * jarg1) {
  unsigned int jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getShowValues();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataSwig_getDescription___(void * jarg1) {
  const char * jresult ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getDescription();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_PropertyMetaDataSwig___(void * jarg1) {
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  
  arg1 = (PropertyMetaData *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ComponentMetaDataSwig_getComponentIdAsInt___(void * jarg1) {
  int jresult ;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  int result;
  
  arg1 = (ComponentMetaData *)jarg1; 
  {
    try {
      result = (int)(arg1)->getComponentIdAsInt();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ComponentMetaDataSwig_getComponentId___(void * jarg1) {
  void * jresult ;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  byte result;
  
  arg1 = (ComponentMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getComponentId();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new byte(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ComponentMetaDataSwig_getName___(void * jarg1) {
  const char * jresult ;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  std::string result;
  
  arg1 = (ComponentMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ComponentMetaDataSwig___(void * jarg1) {
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  
  arg1 = (ComponentMetaData *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ProfileMetaDataSwig_getProfileId___(void * jarg1) {
  unsigned int jresult ;
  ProfileMetaData *arg1 = (ProfileMetaData *) 0 ;
  uint32_t result;
  
  arg1 = (ProfileMetaData *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getProfileId();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ProfileMetaDataSwig___(void * jarg1) {
  ProfileMetaData *arg1 = (ProfileMetaData *) 0 ;
  
  arg1 = (ProfileMetaData *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_ValueMetaDataKeySwig___(const char * jarg1, const char * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  ValueMetaDataKey *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (ValueMetaDataKey *)new ValueMetaDataKey(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataKeySwig_getPropertyName___(void * jarg1) {
  const char * jresult ;
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  std::string result;
  
  arg1 = (ValueMetaDataKey *)jarg1; 
  {
    try {
      result = (arg1)->getPropertyName();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataKeySwig_getValueName___(void * jarg1) {
  const char * jresult ;
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  std::string result;
  
  arg1 = (ValueMetaDataKey *)jarg1; 
  {
    try {
      result = (arg1)->getValueName();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ValueMetaDataKeySwig___(void * jarg1) {
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  
  arg1 = (ValueMetaDataKey *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataSwig_getName___(void * jarg1) {
  const char * jresult ;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  std::string result;
  
  arg1 = (ValueMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataSwig_getDescription___(void * jarg1) {
  const char * jresult ;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  std::string result;
  
  arg1 = (ValueMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getDescription();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataSwig_getUrl___(void * jarg1) {
  const char * jresult ;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  std::string result;
  
  arg1 = (ValueMetaData *)jarg1; 
  {
    try {
      result = (arg1)->getUrl();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ValueMetaDataSwig___(void * jarg1) {
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  
  arg1 = (ValueMetaData *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ComponentMetaDataCollectionSwig___(void * jarg1) {
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  
  arg1 = (Collection< byte,ComponentMetaData > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ComponentMetaDataCollectionSwig_getByKey___(void * jarg1, void * jarg2) {
  void * jresult ;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  byte arg2 ;
  byte *argp2 ;
  ComponentMetaData *result = 0 ;
  
  arg1 = (Collection< byte,ComponentMetaData > *)jarg1; 
  argp2 = (byte *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null byte", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (ComponentMetaData *)(arg1)->getByKey(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ComponentMetaDataCollectionSwig_getByIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  uint32_t arg2 ;
  ComponentMetaData *result = 0 ;
  
  arg1 = (Collection< byte,ComponentMetaData > *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ComponentMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ComponentMetaDataCollectionSwig_getSize___(void * jarg1) {
  unsigned int jresult ;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  uint32_t result;
  
  arg1 = (Collection< byte,ComponentMetaData > *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_PropertyMetaDataCollectionSwig___(void * jarg1) {
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  
  arg1 = (Collection< std::string,PropertyMetaData > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataCollectionSwig_getByKey___(void * jarg1, const char * jarg2) {
  void * jresult ;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  std::string arg2 ;
  PropertyMetaData *result = 0 ;
  
  arg1 = (Collection< std::string,PropertyMetaData > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (PropertyMetaData *)(arg1)->getByKey(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataCollectionSwig_getByIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  uint32_t arg2 ;
  PropertyMetaData *result = 0 ;
  
  arg1 = (Collection< std::string,PropertyMetaData > *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (PropertyMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_PropertyMetaDataCollectionSwig_getSize___(void * jarg1) {
  unsigned int jresult ;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  uint32_t result;
  
  arg1 = (Collection< std::string,PropertyMetaData > *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ProfileMetaDataCollectionSwig___(void * jarg1) {
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  
  arg1 = (Collection< uint32_t,ProfileMetaData > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ProfileMetaDataCollectionSwig_getByKey___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t arg2 ;
  ProfileMetaData *result = 0 ;
  
  arg1 = (Collection< uint32_t,ProfileMetaData > *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ProfileMetaData *)(arg1)->getByKey(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ProfileMetaDataCollectionSwig_getByIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t arg2 ;
  ProfileMetaData *result = 0 ;
  
  arg1 = (Collection< uint32_t,ProfileMetaData > *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ProfileMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ProfileMetaDataCollectionSwig_getSize___(void * jarg1) {
  unsigned int jresult ;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t result;
  
  arg1 = (Collection< uint32_t,ProfileMetaData > *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ValueMetaDataCollectionSwig___(void * jarg1) {
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  
  arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataCollectionSwig_getByKey___(void * jarg1, void * jarg2) {
  void * jresult ;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  SwigValueWrapper< ValueMetaDataKey > arg2 ;
  ValueMetaDataKey *argp2 ;
  ValueMetaData *result = 0 ;
  
  arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *)jarg1; 
  argp2 = (ValueMetaDataKey *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ValueMetaDataKey", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (ValueMetaData *)(arg1)->getByKey(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataCollectionSwig_getByIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  uint32_t arg2 ;
  ValueMetaData *result = 0 ;
  
  arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ValueMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ValueMetaDataCollectionSwig_getSize___(void * jarg1) {
  unsigned int jresult ;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  uint32_t result;
  
  arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_MetaDataSwig___(void * jarg1) {
  MetaData *arg1 = (MetaData *) 0 ;
  
  arg1 = (MetaData *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getComponents___(void * jarg1) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< byte,ComponentMetaData > *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  {
    try {
      result = (Collection< byte,ComponentMetaData > *)(arg1)->getComponents();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getProperties___(void * jarg1) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< std::string,PropertyMetaData > *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  {
    try {
      result = (Collection< std::string,PropertyMetaData > *)(arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getProfiles___(void * jarg1) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< uint32_t,ProfileMetaData > *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  {
    try {
      result = (Collection< uint32_t,ProfileMetaData > *)(arg1)->getProfiles();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getValues___(void * jarg1) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValues();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getValuesForProperty___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (PropertyMetaData *)jarg2; 
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValuesForProperty(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getValuesForProfile___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  ProfileMetaData *arg2 = (ProfileMetaData *) 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (ProfileMetaData *)jarg2; 
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValuesForProfile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getComponentForProfile___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  ProfileMetaData *arg2 = (ProfileMetaData *) 0 ;
  ComponentMetaData *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (ProfileMetaData *)jarg2; 
  {
    try {
      result = (ComponentMetaData *)(arg1)->getComponentForProfile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getComponentForProperty___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  ComponentMetaData *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (PropertyMetaData *)jarg2; 
  {
    try {
      result = (ComponentMetaData *)(arg1)->getComponentForProperty(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getDefaultProfileForComponent___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  ComponentMetaData *arg2 = (ComponentMetaData *) 0 ;
  ProfileMetaData *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (ComponentMetaData *)jarg2; 
  {
    try {
      result = (ProfileMetaData *)(arg1)->getDefaultProfileForComponent(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getDefaultValueForProperty___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  ValueMetaData *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (PropertyMetaData *)jarg2; 
  {
    try {
      result = (ValueMetaData *)(arg1)->getDefaultValueForProperty(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getPropertiesForComponent___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  ComponentMetaData *arg2 = (ComponentMetaData *) 0 ;
  Collection< std::string,PropertyMetaData > *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (ComponentMetaData *)jarg2; 
  {
    try {
      result = (Collection< std::string,PropertyMetaData > *)(arg1)->getPropertiesForComponent(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_MetaDataSwig_getPropertyForValue___(void * jarg1, void * jarg2) {
  void * jresult ;
  MetaData *arg1 = (MetaData *) 0 ;
  ValueMetaData *arg2 = (ValueMetaData *) 0 ;
  PropertyMetaData *result = 0 ;
  
  arg1 = (MetaData *)jarg1; 
  arg2 = (ValueMetaData *)jarg2; 
  {
    try {
      result = (PropertyMetaData *)(arg1)->getPropertyForValue(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_EngineBaseSwig___(void * jarg1) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_setLicenseKey___(void * jarg1, const char * jarg2) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setLicenseKey((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_setDataUpdateUrl___(void * jarg1, const char * jarg2) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setDataUpdateUrl((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getMetaData___(void * jarg1) {
  void * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  MetaData *result = 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (MetaData *)(arg1)->getMetaData();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getAutomaticUpdatesEnabled___(void * jarg1) {
  unsigned int jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  bool result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getAutomaticUpdatesEnabled();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_processBase___(void * jarg1, void * jarg2) {
  void * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  EvidenceBase *arg2 = (EvidenceBase *) 0 ;
  ResultsBase *result = 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  arg2 = (EvidenceBase *)jarg2; 
  {
    try {
      result = (ResultsBase *)(arg1)->processBase(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_refreshData__SWIG_0___(void * jarg1) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      (arg1)->refreshData();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_refreshData__SWIG_1___(void * jarg1, char * jarg2) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->refreshData((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_refreshData__SWIG_2___(void * jarg1, unsigned char* jarg2, int jarg3) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  long arg3 ;
  
  arg1 = (EngineBase *)jarg1; 
  arg2 = jarg2;
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->refreshData(arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getDataUpdateUrl___(void * jarg1) {
  const char * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (arg1)->getDataUpdateUrl();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getPublishedTime___(void * jarg1) {
  void * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  Date result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (arg1)->getPublishedTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getUpdateAvailableTime___(void * jarg1) {
  void * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  Date result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (arg1)->getUpdateAvailableTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getDataFilePath___(void * jarg1) {
  const char * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (arg1)->getDataFilePath();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getDataFileTempPath___(void * jarg1) {
  const char * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (arg1)->getDataFileTempPath();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getProduct___(void * jarg1) {
  const char * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (arg1)->getProduct();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getType___(void * jarg1) {
  const char * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (arg1)->getType();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getKeys___(void * jarg1) {
  void * jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (std::vector< std::string > *)(arg1)->getKeys();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineBaseSwig_getIsThreadSafe___(void * jarg1) {
  unsigned int jresult ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  bool result;
  
  arg1 = (EngineBase *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsThreadSafe();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ConfigBaseSwig___(void * jarg1) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  
  arg1 = (ConfigBase *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_setUseUpperPrefixHeaders___(void * jarg1, unsigned int jarg2) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUseUpperPrefixHeaders(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_setUseTempFile___(void * jarg1, unsigned int jarg2) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUseTempFile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_setReuseTempFile___(void * jarg1, unsigned int jarg2) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReuseTempFile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_setTempDirectories___(void * jarg1, void * jarg2) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  
  arg1 = (ConfigBase *)jarg1; 
  argp2 = (std::vector< std::string > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::string >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setTempDirectories(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_getUseUpperPrefixHeaders___(void * jarg1) {
  unsigned int jresult ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool result;
  
  arg1 = (ConfigBase *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getUseUpperPrefixHeaders();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_getUseTempFile___(void * jarg1) {
  unsigned int jresult ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool result;
  
  arg1 = (ConfigBase *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getUseTempFile();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_getReuseTempFile___(void * jarg1) {
  unsigned int jresult ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool result;
  
  arg1 = (ConfigBase *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getReuseTempFile();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_getTempDirectories___(void * jarg1) {
  void * jresult ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (ConfigBase *)jarg1; 
  {
    try {
      result = (arg1)->getTempDirectories();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigBaseSwig_getConcurrency___(void * jarg1) {
  unsigned short jresult ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  uint16_t result;
  
  arg1 = (ConfigBase *)jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigDeviceDetectionSwig_setUpdateMatchedUserAgent___(void * jarg1, unsigned int jarg2) {
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigDeviceDetection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUpdateMatchedUserAgent(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigDeviceDetectionSwig_setMaxMatchedUserAgentLength___(void * jarg1, int jarg2) {
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  int arg2 ;
  
  arg1 = (ConfigDeviceDetection *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setMaxMatchedUserAgentLength(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigDeviceDetectionSwig_setAllowUnmatched___(void * jarg1, unsigned int jarg2) {
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigDeviceDetection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setAllowUnmatched(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigDeviceDetectionSwig_getUpdateMatchedUserAgent___(void * jarg1) {
  unsigned int jresult ;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  bool result;
  
  arg1 = (ConfigDeviceDetection *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getUpdateMatchedUserAgent();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigDeviceDetectionSwig_getMaxMatchedUserAgentLength___(void * jarg1) {
  int jresult ;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  int result;
  
  arg1 = (ConfigDeviceDetection *)jarg1; 
  {
    try {
      result = (int)(arg1)->getMaxMatchedUserAgentLength();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigDeviceDetectionSwig_getAllowUnmatched___(void * jarg1) {
  unsigned int jresult ;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  bool result;
  
  arg1 = (ConfigDeviceDetection *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getAllowUnmatched();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ConfigDeviceDetectionSwig___(void * jarg1) {
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  
  arg1 = (ConfigDeviceDetection *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_EvidenceBaseSwig___() {
  void * jresult ;
  EvidenceBase *result = 0 ;
  
  {
    try {
      result = (EvidenceBase *)new EvidenceBase();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_EvidenceBaseSwig___(void * jarg1) {
  EvidenceBase *arg1 = (EvidenceBase *) 0 ;
  
  arg1 = (EvidenceBase *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_EvidenceDeviceDetectionSwig___() {
  void * jresult ;
  EvidenceDeviceDetection *result = 0 ;
  
  {
    try {
      result = (EvidenceDeviceDetection *)new EvidenceDeviceDetection();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_EvidenceDeviceDetectionSwig___(void * jarg1) {
  EvidenceDeviceDetection *arg1 = (EvidenceDeviceDetection *) 0 ;
  
  arg1 = (EvidenceDeviceDetection *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineDeviceDetectionSwig_defaultElementDataKey_set___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  EngineDeviceDetection::defaultElementDataKey = *arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineDeviceDetectionSwig_defaultElementDataKey_get___() {
  const char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &EngineDeviceDetection::defaultElementDataKey;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  EngineDeviceDetection *arg1 = (EngineDeviceDetection *) 0 ;
  EvidenceDeviceDetection *arg2 = (EvidenceDeviceDetection *) 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  arg1 = (EngineDeviceDetection *)jarg1; 
  arg2 = (EvidenceDeviceDetection *)jarg2; 
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  EngineDeviceDetection *arg1 = (EngineDeviceDetection *) 0 ;
  char *arg2 = (char *) 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  arg1 = (EngineDeviceDetection *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_EngineDeviceDetectionSwig___(void * jarg1) {
  EngineDeviceDetection *arg1 = (EngineDeviceDetection *) 0 ;
  
  arg1 = (EngineDeviceDetection *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsDeviceDetectionSwig_getDeviceId___(void * jarg1) {
  const char * jresult ;
  ResultsDeviceDetection *arg1 = (ResultsDeviceDetection *) 0 ;
  std::string result;
  
  arg1 = (ResultsDeviceDetection *)jarg1; 
  {
    try {
      result = (arg1)->getDeviceId();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsDeviceDetectionSwig_getUserAgent___(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  ResultsDeviceDetection *arg1 = (ResultsDeviceDetection *) 0 ;
  uint32_t arg2 ;
  std::string result;
  
  arg1 = (ResultsDeviceDetection *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (arg1)->getUserAgent(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsDeviceDetectionSwig_getUserAgents___(void * jarg1) {
  int jresult ;
  ResultsDeviceDetection *arg1 = (ResultsDeviceDetection *) 0 ;
  int result;
  
  arg1 = (ResultsDeviceDetection *)jarg1; 
  {
    try {
      result = (int)(arg1)->getUserAgents();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ResultsDeviceDetectionSwig___(void * jarg1) {
  ResultsDeviceDetection *arg1 = (ResultsDeviceDetection *) 0 ;
  
  arg1 = (ResultsDeviceDetection *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ResultsHashSwig___(void * jarg1) {
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getDeviceId__SWIG_0___(void * jarg1) {
  const char * jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  std::string result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (arg1)->getDeviceId();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getDeviceId__SWIG_1___(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  std::string result;
  
  arg1 = (ResultsHash *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (arg1)->getDeviceId(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getDifference__SWIG_0___(void * jarg1) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDifference();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getDifference__SWIG_1___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (int)(arg1)->getDifference(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getMethod__SWIG_0___(void * jarg1) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getMethod();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getMethod__SWIG_1___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (int)(arg1)->getMethod(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getDrift__SWIG_0___(void * jarg1) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDrift();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getDrift__SWIG_1___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (int)(arg1)->getDrift(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getTrace___(void * jarg1) {
  const char * jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  std::string result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (arg1)->getTrace();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getMatchedNodes___(void * jarg1) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getMatchedNodes();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getIterations___(void * jarg1) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getIterations();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getUserAgent___(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  std::string result;
  
  arg1 = (ResultsHash *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (arg1)->getUserAgent(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_getUserAgents___(void * jarg1) {
  int jresult ;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  int result;
  
  arg1 = (ResultsHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getUserAgents();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_CollectionConfigSwig___() {
  void * jresult ;
  CollectionConfig *result = 0 ;
  
  {
    try {
      result = (CollectionConfig *)new CollectionConfig();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_CollectionConfigSwig_setCapacity___(void * jarg1, unsigned int jarg2) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (CollectionConfig *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->setCapacity(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_CollectionConfigSwig_setConcurrency___(void * jarg1, unsigned short jarg2) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (CollectionConfig *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setConcurrency(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_CollectionConfigSwig_setLoaded___(void * jarg1, unsigned int jarg2) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (CollectionConfig *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->setLoaded(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_CollectionConfigSwig_getCapacity___(void * jarg1) {
  unsigned int jresult ;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t result;
  
  arg1 = (CollectionConfig *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getCapacity();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_CollectionConfigSwig_getConcurrency___(void * jarg1) {
  unsigned short jresult ;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint16_t result;
  
  arg1 = (CollectionConfig *)jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_CollectionConfigSwig_getLoaded___(void * jarg1) {
  unsigned int jresult ;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t result;
  
  arg1 = (CollectionConfig *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getLoaded();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_CollectionConfigSwig___(void * jarg1) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  
  arg1 = (CollectionConfig *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_ConfigHashSwig___() {
  void * jresult ;
  ConfigHash *result = 0 ;
  
  {
    try {
      result = (ConfigHash *)new ConfigHash();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setHighPerformance___(void * jarg1) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      (arg1)->setHighPerformance();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setBalanced___(void * jarg1) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      (arg1)->setBalanced();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setBalancedTemp___(void * jarg1) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      (arg1)->setBalancedTemp();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setLowMemory___(void * jarg1) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      (arg1)->setLowMemory();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setMaxPerformance___(void * jarg1) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      (arg1)->setMaxPerformance();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setDrift___(void * jarg1, int jarg2) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ConfigHash *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try {
      (arg1)->setDrift(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setDifference___(void * jarg1, int jarg2) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ConfigHash *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try {
      (arg1)->setDifference(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setConcurrency___(void * jarg1, unsigned short jarg2) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (ConfigHash *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setConcurrency(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setUsePerformanceGraph___(void * jarg1, unsigned int jarg2) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigHash *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUsePerformanceGraph(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setUsePredictiveGraph___(void * jarg1, unsigned int jarg2) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigHash *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUsePredictiveGraph(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_setTraceRoute___(void * jarg1, unsigned int jarg2) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool arg2 ;
  
  arg1 = (ConfigHash *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setTraceRoute(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getStrings___(void * jarg1) {
  void * jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  CollectionConfig result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (arg1)->getStrings();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new CollectionConfig(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getProperties___(void * jarg1) {
  void * jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  CollectionConfig result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new CollectionConfig(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getValues___(void * jarg1) {
  void * jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  CollectionConfig result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (arg1)->getValues();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new CollectionConfig(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getProfiles___(void * jarg1) {
  void * jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  CollectionConfig result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (arg1)->getProfiles();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new CollectionConfig(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getNodes___(void * jarg1) {
  void * jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  CollectionConfig result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (arg1)->getNodes();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new CollectionConfig(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getProfileOffsets___(void * jarg1) {
  void * jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  CollectionConfig result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (arg1)->getProfileOffsets();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new CollectionConfig(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getDrift___(void * jarg1) {
  int jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  int result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDrift();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getDifference___(void * jarg1) {
  int jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  int result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (int)(arg1)->getDifference();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getUsePerformanceGraph___(void * jarg1) {
  unsigned int jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getUsePerformanceGraph();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getUsePredictiveGraph___(void * jarg1) {
  unsigned int jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getUsePredictiveGraph();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getConcurrency___(void * jarg1) {
  unsigned short jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  uint16_t result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_getTraceRoute___(void * jarg1) {
  unsigned int jresult ;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool result;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getTraceRoute();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_ConfigHashSwig___(void * jarg1) {
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  
  arg1 = (ConfigHash *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_EngineHashSwig__SWIG_0___(const char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ConfigHash *arg2 = (ConfigHash *) 0 ;
  RequiredPropertiesConfig *arg3 = (RequiredPropertiesConfig *) 0 ;
  EngineHash *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ConfigHash *)jarg2; 
  arg3 = (RequiredPropertiesConfig *)jarg3; 
  {
    try {
      result = (EngineHash *)new EngineHash((std::string const &)*arg1,arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_new_EngineHashSwig__SWIG_1___(unsigned char* jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  unsigned char *arg1 = (unsigned char *) (unsigned char *)0 ;
  long arg2 ;
  ConfigHash *arg3 = (ConfigHash *) 0 ;
  RequiredPropertiesConfig *arg4 = (RequiredPropertiesConfig *) 0 ;
  EngineHash *result = 0 ;
  
  arg1 = jarg1;
  arg2 = (long)jarg2; 
  arg3 = (ConfigHash *)jarg3; 
  arg4 = (RequiredPropertiesConfig *)jarg4; 
  {
    try {
      result = (EngineHash *)new EngineHash(arg1,arg2,arg3,arg4);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_getPublishedTime___(void * jarg1) {
  void * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  Date result;
  
  arg1 = (EngineHash *)jarg1; 
  {
    try {
      result = (arg1)->getPublishedTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_getUpdateAvailableTime___(void * jarg1) {
  void * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  Date result;
  
  arg1 = (EngineHash *)jarg1; 
  {
    try {
      result = (arg1)->getUpdateAvailableTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_getDataFilePath___(void * jarg1) {
  const char * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  std::string result;
  
  arg1 = (EngineHash *)jarg1; 
  {
    try {
      result = (arg1)->getDataFilePath();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_getDataFileTempPath___(void * jarg1) {
  const char * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  std::string result;
  
  arg1 = (EngineHash *)jarg1; 
  {
    try {
      result = (arg1)->getDataFileTempPath();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_refreshData__SWIG_0___(void * jarg1) {
  EngineHash *arg1 = (EngineHash *) 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  {
    try {
      (arg1)->refreshData();;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_refreshData__SWIG_1___(void * jarg1, char * jarg2) {
  EngineHash *arg1 = (EngineHash *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->refreshData((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_refreshData__SWIG_2___(void * jarg1, unsigned char* jarg2, int jarg3) {
  EngineHash *arg1 = (EngineHash *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  long arg3 ;
  
  arg1 = (EngineHash *)jarg1; 
  arg2 = jarg2;
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->refreshData(arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_process__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  EvidenceDeviceDetection *arg2 = (EvidenceDeviceDetection *) 0 ;
  ResultsHash *result = 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  arg2 = (EvidenceDeviceDetection *)jarg2; 
  {
    try {
      result = (ResultsHash *)(arg1)->process(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_process__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  char *arg2 = (char *) 0 ;
  ResultsHash *result = 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (ResultsHash *)(arg1)->process((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_processBase___(void * jarg1, void * jarg2) {
  void * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  EvidenceBase *arg2 = (EvidenceBase *) 0 ;
  ResultsBase *result = 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  arg2 = (EvidenceBase *)jarg2; 
  {
    try {
      result = (ResultsBase *)(arg1)->processBase(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_processDeviceDetection__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  EvidenceDeviceDetection *arg2 = (EvidenceDeviceDetection *) 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  arg2 = (EvidenceDeviceDetection *)jarg2; 
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_processDeviceDetection__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  EngineHash *arg1 = (EngineHash *) 0 ;
  char *arg2 = (char *) 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_delete_EngineHashSwig___(void * jarg1) {
  EngineHash *arg1 = (EngineHash *) 0 ;
  
  arg1 = (EngineHash *)jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT ConfigBase * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigDeviceDetectionSwig_SWIGUpcast___(ConfigDeviceDetection *jarg1) {
    return (ConfigBase *)jarg1;
}

SWIGEXPORT std::map< std::string,std::string > * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EvidenceBaseSwig_SWIGUpcast___(EvidenceBase *jarg1) {
    return (std::map< std::string,std::string > *)jarg1;
}

SWIGEXPORT EvidenceBase * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EvidenceDeviceDetectionSwig_SWIGUpcast___(EvidenceDeviceDetection *jarg1) {
    return (EvidenceBase *)jarg1;
}

SWIGEXPORT EngineBase * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineDeviceDetectionSwig_SWIGUpcast___(EngineDeviceDetection *jarg1) {
    return (EngineBase *)jarg1;
}

SWIGEXPORT ResultsBase * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsDeviceDetectionSwig_SWIGUpcast___(ResultsDeviceDetection *jarg1) {
    return (ResultsBase *)jarg1;
}

SWIGEXPORT ResultsDeviceDetection * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ResultsHashSwig_SWIGUpcast___(ResultsHash *jarg1) {
    return (ResultsDeviceDetection *)jarg1;
}

SWIGEXPORT ConfigDeviceDetection * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_ConfigHashSwig_SWIGUpcast___(ConfigHash *jarg1) {
    return (ConfigDeviceDetection *)jarg1;
}

SWIGEXPORT EngineDeviceDetection * SWIGSTDCALL CSharp_FiftyOnefDeviceDetectionfHashfEnginefOnPremisefInterop_EngineHashSwig_SWIGUpcast___(EngineHash *jarg1) {
    return (EngineDeviceDetection *)jarg1;
}

#ifdef __cplusplus
}
#endif

