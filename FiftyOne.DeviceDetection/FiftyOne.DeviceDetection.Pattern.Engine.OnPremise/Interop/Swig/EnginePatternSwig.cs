//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.DeviceDetection.Pattern.Engine.OnPremise.Interop {

internal class EnginePatternSwig : EngineDeviceDetectionSwig {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal EnginePatternSwig(global::System.IntPtr cPtr, bool cMemoryOwn) : base(DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EnginePatternSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DeviceDetectionPatternEngineModulePINVOKE.delete_EnginePatternSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public EnginePatternSwig(string fileName, ConfigPatternSwig config, RequiredPropertiesConfigSwig properties) : this(DeviceDetectionPatternEngineModulePINVOKE.new_EnginePatternSwig__SWIG_0(fileName, ConfigPatternSwig.getCPtr(config), RequiredPropertiesConfigSwig.getCPtr(properties)), true) {
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public EnginePatternSwig(byte[] data, int length, ConfigPatternSwig config, RequiredPropertiesConfigSwig properties) : this(DeviceDetectionPatternEngineModulePINVOKE.new_EnginePatternSwig__SWIG_1(data, length, ConfigPatternSwig.getCPtr(config), RequiredPropertiesConfigSwig.getCPtr(properties)), true) {
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public override Date getPublishedTime() {
    Date ret = new Date(DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_getPublishedTime(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Date getUpdateAvailableTime() {
    Date ret = new Date(DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_getUpdateAvailableTime(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getDataFilePath() {
    string ret = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_getDataFilePath(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getDataFileTempPath() {
    string ret = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_getDataFileTempPath(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void refreshData() {
    DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_refreshData__SWIG_0(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void refreshData(string fileName) {
    DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_refreshData__SWIG_1(swigCPtr, fileName);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void refreshData(byte[] data, int length) {
    DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_refreshData__SWIG_2(swigCPtr, data, length);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public ResultsPatternSwig process(EvidenceDeviceDetectionSwig evidence, int closestSignatures) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_process__SWIG_0(swigCPtr, EvidenceDeviceDetectionSwig.getCPtr(evidence), closestSignatures);
    ResultsPatternSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsPatternSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResultsPatternSwig process(string userAgent, int closestSignatures) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_process__SWIG_1(swigCPtr, userAgent, closestSignatures);
    ResultsPatternSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsPatternSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResultsPatternSwig process(EvidenceDeviceDetectionSwig evidence) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_process__SWIG_2(swigCPtr, EvidenceDeviceDetectionSwig.getCPtr(evidence));
    ResultsPatternSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsPatternSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResultsPatternSwig process(string userAgent) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_process__SWIG_3(swigCPtr, userAgent);
    ResultsPatternSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsPatternSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ResultsBaseSwig processBase(EvidenceBaseSwig evidence) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_processBase(swigCPtr, EvidenceBaseSwig.getCPtr(evidence));
    ResultsBaseSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsBaseSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ResultsDeviceDetectionSwig processDeviceDetection(EvidenceDeviceDetectionSwig evidence) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_processDeviceDetection__SWIG_0(swigCPtr, EvidenceDeviceDetectionSwig.getCPtr(evidence));
    ResultsDeviceDetectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsDeviceDetectionSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ResultsDeviceDetectionSwig processDeviceDetection(string userAgent) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EnginePatternSwig_processDeviceDetection__SWIG_1(swigCPtr, userAgent);
    ResultsDeviceDetectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsDeviceDetectionSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
