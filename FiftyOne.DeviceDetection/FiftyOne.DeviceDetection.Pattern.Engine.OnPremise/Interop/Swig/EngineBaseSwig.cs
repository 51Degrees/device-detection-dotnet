//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.DeviceDetection.Pattern.Engine.OnPremise.Interop {

internal class EngineBaseSwig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EngineBaseSwig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EngineBaseSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EngineBaseSwig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DeviceDetectionPatternEngineModulePINVOKE.delete_EngineBaseSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void setLicenseKey(string licenceKey) {
    DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_setLicenseKey(swigCPtr, licenceKey);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDataUpdateUrl(string updateUrl) {
    DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_setDataUpdateUrl(swigCPtr, updateUrl);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public MetaDataSwig getMetaData() {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getMetaData(swigCPtr);
    MetaDataSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new MetaDataSwig(cPtr, false);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getAutomaticUpdatesEnabled() {
    bool ret = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getAutomaticUpdatesEnabled(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ResultsBaseSwig processBase(EvidenceBaseSwig evidence) {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_processBase(swigCPtr, EvidenceBaseSwig.getCPtr(evidence));
    ResultsBaseSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsBaseSwig(cPtr, true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void refreshData() {
    DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_refreshData__SWIG_0(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void refreshData(string fileName) {
    DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_refreshData__SWIG_1(swigCPtr, fileName);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void refreshData(byte[] data, int length) {
    DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_refreshData__SWIG_2(swigCPtr, data, length);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getDataUpdateUrl() {
    string ret = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getDataUpdateUrl(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Date getPublishedTime() {
    Date ret = new Date(DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getPublishedTime(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Date getUpdateAvailableTime() {
    Date ret = new Date(DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getUpdateAvailableTime(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getDataFilePath() {
    string ret = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getDataFilePath(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getDataFileTempPath() {
    string ret = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getDataFileTempPath(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getProduct() {
    string ret = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getProduct(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getType() {
    string ret = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getType(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorStringSwig getKeys() {
    global::System.IntPtr cPtr = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getKeys(swigCPtr);
    VectorStringSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorStringSwig(cPtr, false);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getIsThreadSafe() {
    bool ret = DeviceDetectionPatternEngineModulePINVOKE.EngineBaseSwig_getIsThreadSafe(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
