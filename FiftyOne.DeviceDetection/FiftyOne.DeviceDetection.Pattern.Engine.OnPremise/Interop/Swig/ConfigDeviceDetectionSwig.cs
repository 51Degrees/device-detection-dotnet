//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.DeviceDetection.Pattern.Engine.OnPremise.Interop {

internal class ConfigDeviceDetectionSwig : ConfigBaseSwig {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ConfigDeviceDetectionSwig(global::System.IntPtr cPtr, bool cMemoryOwn) : base(DeviceDetectionPatternEngineModulePINVOKE.ConfigDeviceDetectionSwig_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConfigDeviceDetectionSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DeviceDetectionPatternEngineModulePINVOKE.delete_ConfigDeviceDetectionSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public void setUpdateMatchedUserAgent(bool update) {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigDeviceDetectionSwig_setUpdateMatchedUserAgent(swigCPtr, update);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaxMatchedUserAgentLength(int length) {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigDeviceDetectionSwig_setMaxMatchedUserAgentLength(swigCPtr, length);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAllowUnmatched(bool allow) {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigDeviceDetectionSwig_setAllowUnmatched(swigCPtr, allow);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUpdateMatchedUserAgent() {
    bool ret = DeviceDetectionPatternEngineModulePINVOKE.ConfigDeviceDetectionSwig_getUpdateMatchedUserAgent(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getMaxMatchedUserAgentLength() {
    int ret = DeviceDetectionPatternEngineModulePINVOKE.ConfigDeviceDetectionSwig_getMaxMatchedUserAgentLength(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getAllowUnmatched() {
    bool ret = DeviceDetectionPatternEngineModulePINVOKE.ConfigDeviceDetectionSwig_getAllowUnmatched(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
