//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.DeviceDetection.Pattern.Engine.OnPremise.Interop {

internal class ConfigPatternSwig : ConfigDeviceDetectionSwig {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ConfigPatternSwig(global::System.IntPtr cPtr, bool cMemoryOwn) : base(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConfigPatternSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DeviceDetectionPatternEngineModulePINVOKE.delete_ConfigPatternSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ConfigPatternSwig() : this(DeviceDetectionPatternEngineModulePINVOKE.new_ConfigPatternSwig(), true) {
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHighPerformance() {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setHighPerformance(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBalanced() {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setBalanced(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBalancedTemp() {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setBalancedTemp(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLowMemory() {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setLowMemory(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaxPerformance() {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setMaxPerformance(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setClosestSignatures(int closestSignature) {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setClosestSignatures(swigCPtr, closestSignature);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDifference(int difference) {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setDifference(swigCPtr, difference);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUserAgentCacheCapacity(uint capacity) {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setUserAgentCacheCapacity(swigCPtr, capacity);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConcurrency(ushort concurrency) {
    DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_setConcurrency(swigCPtr, concurrency);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public CollectionConfigSwig getStrings() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getStrings(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getProperties() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getProperties(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getValues() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getValues(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getProfiles() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getProfiles(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getSignatures() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getSignatures(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getSignatureNodeOffsets() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getSignatureNodeOffsets(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getNodeRankedSignatureIndexes() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getNodeRankedSignatureIndexes(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getRankedSignatureIndexes() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getRankedSignatureIndexes(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getNodes() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getNodes(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CollectionConfigSwig getProfileOffsets() {
    CollectionConfigSwig ret = new CollectionConfigSwig(DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getProfileOffsets(swigCPtr), true);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getClosestSignatures() {
    int ret = DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getClosestSignatures(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getDifference() {
    int ret = DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getDifference(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ushort getConcurrency() {
    ushort ret = DeviceDetectionPatternEngineModulePINVOKE.ConfigPatternSwig_getConcurrency(swigCPtr);
    if (DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionPatternEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
