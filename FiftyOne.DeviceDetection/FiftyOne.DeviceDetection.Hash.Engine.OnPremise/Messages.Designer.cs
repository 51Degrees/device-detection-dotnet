//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FiftyOne.DeviceDetection.Hash.Engine.OnPremise {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FiftyOne.DeviceDetection.Hash.Engine.OnPremise.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DeviceDataHash instance has been closed, and cannot be used. Any result processing should be carried out within a &apos;try-with-resource&apos; block which closes the FlowData and any AutoCloseable elements..
        /// </summary>
        internal static string DeviceDataHashDisposed {
            get {
                return ResourceManager.GetString("DeviceDataHashDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to close native results instance. A DeviceDataHash instance contains native unmanaged memory which needs to be closed. Failing to close could lead to memory leaks..
        /// </summary>
        internal static string DeviceDataHashFailedToDispose {
            get {
                return ResourceManager.GetString("DeviceDataHashFailedToDispose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 51Degrees uses a native binary that must match the ‘bitness’ of the running process (i.e. x86 or x64). Please ensure your build process is targeting the correct platform. This will ensure that the correct dll is used. If using IIS, be aware that, although this is a 64 bit process, it is often run with a setting that allows 32 bit applications. In this case, your build must target x86. The currently running process is {0}..
        /// </summary>
        internal static string DllBadImageFormatException {
            get {
                return ResourceManager.GetString("DllBadImageFormatException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load the Device Detection native library, common causes include: 
        ///    - Missing dependencies:
        ///        o On Windows, the Visual C++ runtime is not installed, see the Visual Studio download page for the latest C++ Redistributable: https://visualstudio.microsoft.com/downloads/
        ///        o On Linux, the libatomic shared object is missing. On Debian based distributions, run ‘apt install libatomic1’; on RedHat based distributions, run ‘&lt;yum|dnf&gt; install libatomic’.
        ///    - The DLL file was not copied to [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DLLException {
            get {
                return ResourceManager.GetString("DLLException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A results cache cannot be configured in the Device-Detection Hash engine. The overhead of having to manage native object lifetimes when a cache is enabled outweighs the benefit of the cache..
        /// </summary>
        internal static string ExceptionSetCache {
            get {
                return ResourceManager.GetString("ExceptionSetCache", resourceCulture);
            }
        }
    }
}
