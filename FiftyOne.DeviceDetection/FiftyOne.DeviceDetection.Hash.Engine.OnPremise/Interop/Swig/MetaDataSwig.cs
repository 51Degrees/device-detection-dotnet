/* ********************************************************************
 * Copyright (C) 2019  51Degrees Mobile Experts Limited.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * ******************************************************************** */

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.DeviceDetection.Hash.Engine.OnPremise.Interop {

internal class MetaDataSwig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MetaDataSwig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MetaDataSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MetaDataSwig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DeviceDetectionHashEngineModulePINVOKE.delete_MetaDataSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ComponentMetaDataCollectionSwig getComponents() {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getComponents(swigCPtr);
    ComponentMetaDataCollectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ComponentMetaDataCollectionSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PropertyMetaDataCollectionSwig getProperties() {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getProperties(swigCPtr);
    PropertyMetaDataCollectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new PropertyMetaDataCollectionSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProfileMetaDataCollectionSwig getProfiles() {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getProfiles(swigCPtr);
    ProfileMetaDataCollectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProfileMetaDataCollectionSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ValueMetaDataCollectionSwig getValues() {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getValues(swigCPtr);
    ValueMetaDataCollectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ValueMetaDataCollectionSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ValueMetaDataCollectionSwig getValuesForProperty(PropertyMetaDataSwig property) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getValuesForProperty(swigCPtr, PropertyMetaDataSwig.getCPtr(property));
    ValueMetaDataCollectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ValueMetaDataCollectionSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ValueMetaDataCollectionSwig getValuesForProfile(ProfileMetaDataSwig profile) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getValuesForProfile(swigCPtr, ProfileMetaDataSwig.getCPtr(profile));
    ValueMetaDataCollectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ValueMetaDataCollectionSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ComponentMetaDataSwig getComponentForProfile(ProfileMetaDataSwig profile) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getComponentForProfile(swigCPtr, ProfileMetaDataSwig.getCPtr(profile));
    ComponentMetaDataSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ComponentMetaDataSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ComponentMetaDataSwig getComponentForProperty(PropertyMetaDataSwig property) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getComponentForProperty(swigCPtr, PropertyMetaDataSwig.getCPtr(property));
    ComponentMetaDataSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ComponentMetaDataSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProfileMetaDataSwig getDefaultProfileForComponent(ComponentMetaDataSwig component) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getDefaultProfileForComponent(swigCPtr, ComponentMetaDataSwig.getCPtr(component));
    ProfileMetaDataSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProfileMetaDataSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ValueMetaDataSwig getDefaultValueForProperty(PropertyMetaDataSwig property) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getDefaultValueForProperty(swigCPtr, PropertyMetaDataSwig.getCPtr(property));
    ValueMetaDataSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ValueMetaDataSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PropertyMetaDataCollectionSwig getPropertiesForComponent(ComponentMetaDataSwig component) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getPropertiesForComponent(swigCPtr, ComponentMetaDataSwig.getCPtr(component));
    PropertyMetaDataCollectionSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new PropertyMetaDataCollectionSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PropertyMetaDataSwig getPropertyForValue(ValueMetaDataSwig value) {
    global::System.IntPtr cPtr = DeviceDetectionHashEngineModulePINVOKE.MetaDataSwig_getPropertyForValue(swigCPtr, ValueMetaDataSwig.getCPtr(value));
    PropertyMetaDataSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new PropertyMetaDataSwig(cPtr, true);
    if (DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Pending) throw DeviceDetectionHashEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
